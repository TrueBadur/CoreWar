# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    _merge                                             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: wgorold <wgorold@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/10/11 16:24:31 by wgorold           #+#    #+#              #
#    Updated: 2019/11/21 21:44:27 by wgorold          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "corewar.h"

#define SZ 10

int 	show(void *data)
{
	printf("%d -> ", *(int *)(data));
	return 0;
}

int 	lst_show_sub(void *data)
{
	t_list		*lst;
	t_list_node	*cur;
	t_list_node	*to_show;

	lst = (t_list *)data;
	cur = lst->begin;
	while (cur)
	{
		to_show = cur->content;
		while(to_show)
		{
			printf("%d -> ", *(int *)(to_show->content));
			to_show = to_show->next;
		}
		printf("\n");
		cur = cur->next;
	}
	return (0);
}

int 	show_sub(void *data)
{
	t_list_node	*cur;
	t_list_node	*to_show;

	cur = (t_list_node	*)data;
	while (cur)
	{
		printf("%d -> ", *(int *)(cur->content));
		cur = cur->next;
	}
	return (0);
}

int		condition(t_list_node *lf_tmp, t_list_node	*rg_tmp)
{
	if (*(int *)(lf_tmp->content) <= *(int *)(rg_tmp->content))
		return (1);
	else
		return (0);
}

/*
** 0 - ok
** 1 - error
** 2 - sorted
*/
int		nms_cnt_lst_end(t_list *control, t_list_node *begin)
{
	t_list_node	*to_add;

	if (control->len > 0)
	{
		if ((to_add = ft_lstnew_noc(begin, 0)) == NULL)
			return (1);
		ft_lstaddend(control, to_add);
		return (0);
	}
	return (2);
}

int		nms_cnt_lst(t_list *control, t_list *to_sort)
{
	t_list_node	*n_left;
	t_list_node	*n_right;
	t_list_node	*to_add;
	t_list_node *begin;

	begin = to_sort->begin;
	n_left = to_sort->begin;
	n_right = n_left->next;
	while(n_right)
	{
		if (!condition(n_left, n_right))
		{
			if ((to_add = ft_lstnew_noc(begin, 0)) == NULL)
				return (1);
			ft_lstaddend(control, to_add);
			begin = n_right;
			n_left->next = NULL;
			n_right->prev = NULL;

		}
		n_left = n_right;
		n_right = n_left->next;
	}
	return (nms_cnt_lst_end(control, begin));
}

int 	weave_job(t_list_node **yarn, t_list_node **clew, t_list_node *nthr)
{
	*yarn = *clew;
	*clew = (*clew)->next;
	if (*clew == NULL)
	{
		(*yarn)->next = nthr;
		nthr->prev = *yarn;
		return (0);
	}
	return (1);
}

int		weave(t_list_node **yarn, t_list_node **left_clew, t_list_node **right_clew, int yarn_state)
{
	t_list_node **clew;
	t_list_node *nthr;

	clew = (yarn_state == 1) ? right_clew : left_clew;
	nthr = (yarn_state == 1) ? *left_clew : *right_clew;
	return (weave_job(yarn, clew, nthr));
}

void	swap_clew_job(t_list_node *yarn, t_list_node *trg_clew, t_list_node *old, int *yarn_state)
{
	yarn->next = trg_clew;
	trg_clew->prev = yarn;
	old->prev = NULL;
	*yarn_state = -(*yarn_state);
}

void	swap_clew(t_list_node *yarn, t_list_node *left_clew, t_list_node *right_clew, int *yarn_state)
{
	t_list_node *trg_clew;
	t_list_node *old;

	trg_clew = (*yarn_state == 1) ? left_clew : right_clew;
	old = (*yarn_state == 1) ? right_clew : left_clew;
	swap_clew_job(yarn, trg_clew, old, yarn_state);
}

/*
** update value of merged right node
** delete from list merged left node
** add deleted node to trash
*/
void	update_node(t_list_node *left, t_list_node *right, t_list *trash)
{
	left->content = NULL;
	if (left->content_size > right->content_size)
		right->content_size = left->content_size;
	right->content_size += 1;
	right->prev = left->prev;
	left->next = NULL;
	left->prev = NULL;
	left->content = NULL;
	left->content_size = 0;
	ft_lstaddend(trash, left);
}

/*
** merge return last yarn node
*/
t_list_node *merge(t_list_node *left, t_list_node *right, t_list *trash)
{
	t_list_node *yarn;
	t_list_node *lf_tmp;
	t_list_node *rg_tmp;
	int			yarn_state;
	int 		compare;

	lf_tmp = (t_list_node *)(left->content);
	rg_tmp = (t_list_node *)(right->content);
	yarn = NULL;
	compare = condition(lf_tmp, rg_tmp);
	right->content = (compare) ? lf_tmp : rg_tmp;
	yarn_state = (compare) ? -1 : 1;
	while (weave(&yarn, &lf_tmp, &rg_tmp, yarn_state))
	{
		compare = condition(lf_tmp, rg_tmp);
		if (yarn_state == 1 && compare)
			swap_clew(yarn, lf_tmp, rg_tmp, &yarn_state);
		else if (yarn_state == -1 && !compare)
			swap_clew(yarn, lf_tmp, rg_tmp, &yarn_state);
	}
	update_node(left, right, trash);
	return (yarn);
}

void	show_cs_from_back(t_list_node *node, t_list_node *end)
{
	printf("node: ");
	show_sub(node->content);
	printf("\n");
	while (end)
	{
		printf("%zu: ", end->content_size);
		show_sub(end->content);
		end = end->prev;
		printf("\n");
	}
	printf("\n");
}

void	show_elem(t_list_node *node)
{
	while (node)
	{
		printf("%d -> ", *(int *)(node->content));
		node = node->next;
	}
	printf("\n");
}

void free_list_without_content(t_list *lst)
{
	t_list_node	*node;
	t_list_node	*tmp;

	if (lst->len == 0)
	{
		free(lst);
		return ;
	}
	node = lst->begin;
	while (node)
	{
		tmp = node->next;
		free(node);
		node = tmp;
	}
	free(lst);
}

/*
** code - 0 - never pass
** code - 1 - error malloc list
** code - 2 - list already sorter
** code - 3 - ok after merge
*/
int		free_nms(t_list *control, t_list *trash, int code)
{
	if (code == 3)
	{
		free_list_without_content(trash);
		free(control->end);
		free(control);
	}
	else
	{
		free_list_without_content(trash);
		free_list_without_content(control);
	}
	return (code == 1) ? 1 : 0;
}

int		nms_init(t_list *to_sort, t_list **control, t_list **trash)
{
	*control = ft_lstinit();
	*trash = ft_lstinit();
	return (nms_cnt_lst(*control, to_sort));
}

int		nms_end(t_list *to_sort, t_list *control, t_list *trash, t_list_node *node)
{
	to_sort->begin = node->content;
	while (to_sort->end->next)
		to_sort->end = to_sort->end->next;
	return (free_nms(control, trash, 3));
}

int		nms(t_list *to_sort)
{
	t_list		*control;
	t_list		*trash;
	t_list_node	*node;
	int			err;

	if ((err = nms_init(to_sort, &control, &trash)))
		return (free_nms(control, trash, err));
	node = control->begin;
	show_cs_from_back(node, control->end);
	while (!(node->next == NULL && node->prev == NULL))
	{
		if (node->prev == NULL)
			node = node->next;
		else if (node->next == NULL && node->prev->prev == NULL)
			to_sort->end = merge(node->prev, node, trash);
		else if (node->next == NULL)
			merge(node->prev, node, trash);
		else if (node->content_size == node->prev->content_size)
			merge(node->prev, node, trash);
		else
			node = node->next;
		show_cs_from_back(node, control->end);
	}
	return (nms_end(to_sort, control, trash, node));
}

int main(void)
{
	t_list		*to_sort;
	t_list_node	*node;
	int 		idx;
	int tab[SZ] = {3, 4, 2, 1, 7, 5 , 8, 9, 0, 6};


	to_sort = ft_lstinit();
	node = NULL;
	idx = -1;
	while (++idx < SZ)
		ft_lstaddend(to_sort, ft_lstnew_noc(tab + idx, 0));
	ft_lstiter(to_sort, &show);
	printf("\n");
	printf("\n");
	nms(to_sort);
	ft_lstiter(to_sort, &show);
	printf("\n");
	node = to_sort->end;
	while(node)
	{
		printf("%d <- ", *(int *)(node->content));
		node = node->prev;
	}
	free_list_without_content(to_sort);
}
